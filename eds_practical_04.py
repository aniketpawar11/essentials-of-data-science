# -*- coding: utf-8 -*-
"""EDS_PRACTICAL_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_-HzTQFAGXpxE1mvkDB9y29U9ejBgHG

# PRACTICAL NO.04
Practice Lab Assignment:
1. Perform all the pandas operations in python.
Lab Assignment:
Read any real life dataset. Store the data into Data Frames. Identify 20 grains for the given dataset.
Implement all 20 grains using Pandas methods. The Sample Grains for Sales Dataset as:
- Which was the best month for sales? How much was earned that month?
- Which product sold the most? Why do you think it did?
- Which city sold the most products?
- What Products are most often sold together?
Self Study Assignment:
Perform advanced Data Manipulation operations
"""

import numpy as np
import pandas as pd

all_data=pd.read_csv("/content/eds practical 4.csv")

all_data.head()

"""# Clean up the data!

# Drop rows of NAN
"""

# Find NAN
nan_df = all_data[all_data.isna().any(axis=1)]
display(nan_df.head())

all_data = all_data.dropna(how='all')
all_data.head()

"""# Get rid of text in order date column"""

all_data = all_data[all_data['Order Date'].str[0:2]!='Or']

"""# Make columns correct type"""

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

"""# Augment data with additional columns
Add month columnÂ¶
"""

all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()

"""# Add month column (alternative method)"""

all_data['Month 2'] = pd.to_datetime(all_data['Order Date']).dt.month
all_data.head()

"""# Add city column"""

def get_city(address):
    return address.split(",")[1].strip(" ")

def get_state(address):
    return address.split(",")[2].split(" ")[1]

all_data['City'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)}  ({get_state(x)})")
all_data.head()

"""# Data Exploration!
Question 1: What was the best month for sales? How much was earned that month?
"""

all_data['Sales'] = all_data['Quantity Ordered'].astype('int') * all_data['Price Each'].astype('float')

all_data.groupby(['Month']).sum()

"""# Question 2: What city sold the most product?"""

city_max=all_data.groupby(['City']).sum()
print(max(city_max))

"""# Question 4: What products are most often sold together?"""

df = all_data[all_data['Order ID'].duplicated(keep=False)]

# Referenced: https://stackoverflow.com/questions/27298178/concatenate-strings-from-several-rows-using-pandas-groupby
df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))
df2 = df[['Order ID', 'Grouped']].drop_duplicates()
print(df['Grouped'])

from itertools import combinations
from collections import Counter

count = Counter()

for row in df2['Grouped']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list, 2)))

for key,value in count.most_common(10):
    print(key, value)

"""# What product sold the most? Why do you think it sold the most?"""

product_group = all_data.groupby('Product')
quantity_ordered = product_group.sum()['Quantity Ordered']

print(quantity_ordered)

prices = all_data.groupby('Product').mean()['Price Each']

print(prices)

